/* autogenerated by Processing revision 1279 on 2022-03-14 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import controlP5.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class ZhengIA extends PApplet {

	

  
  // Global variables
  public static boolean mouseDown = false;
  public static String stage = "welcome";
  public static String universalAdminPin = "1234";
  public static int currentUser = -1;
  public static int questionNumber = -1;
  public static int startTime;
  Textfield usernameField,passwordField,confirmPasswordField,adminPasswordField,userAnswerField1,userAnswerField2;
  Textlabel wrongAdminPin, wrongConfirmPassword,wrongInvalidLogin, wrongPasswordLength, timeLabel;
  PImage backImg,group1,group2,urbanaMiddleSchool,award;
  PFont impact,impact45,arial20,arial15;
  JSONArray users,questions;
  ControlP5 gui;

  /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Setup and Settings ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */


  public void settings() {
    // canvas size
    size(1280, 720);
    backImg = loadImage("images/background.png");
    urbanaMiddleSchool = loadImage("images/urbanaMiddleSchool.png");
    group1 = loadImage("images/group1.png");
    group2 = loadImage("images/group2.png");
    award = loadImage("images/award.png");

  }

  public void setup() { 
     
    gui = new ControlP5(this);
    
    impact = createFont("font/impact.otf",256);
    impact45 = createFont("font/impact.otf", 45);
    arial20 = createFont("Arial",20);
    arial15 = createFont("Arial",15);

    users = new JSONArray(); //creates a user object with a ton of user info
    users = loadJSONArray("new.json");

    questions = new JSONArray(); //creates a JSON object with the questions
    
    welcomeGUI(); //open welcomeGUI
  }

  public void draw() {
    noStroke();
    int timeLeft;
    
    if(gui.isMouseOver()){ //If hovering over button, change cursor
      cursor(HAND);
    } else {
      cursor(ARROW);
    }

    int seconds = (millis()/1000);

      
    if(stage.equals("sprintRoundStart")){
      timeLeft = (1200-(seconds - startTime));

      fill(0xFFE3E3E3);
      rect(925,200,250,50);

      fill(color(0,0,0));
      if(timeLeft < 300){
        fill(color(255,0,0));
      }


      textFont(arial20);
      textSize(30);
      
      text("Time Left: " + (((int)timeLeft/60) + ":" + String.format("%02d",(timeLeft - (((int)timeLeft/60)*60)))) ,925,200,250,50);

      if(timeLeft == 0){
        nextButton();
        finishRoundGUI();
      }
      
      delay(5);
    }else if(stage.equals("targetRoundStart")){
      timeLeft = (720-(seconds - startTime));

      fill(0xFFE3E3E3);
      rect(950,200,250,50);

      fill(color(0,0,0));
      if(timeLeft < 360){
        fill(color(255,0,0));
      }

      textFont(arial20);
      textSize(30);
      text("Time Left: " + (((int)timeLeft/60) + ":" + String.format("%02d",(timeLeft - (((int)timeLeft/60)*60)))) ,925,200,250,50);
      
      if(timeLeft == 0){
        nextButton();
        finishRoundGUI();
      }
      
      delay(5);
    }else if(stage.equals("teamRoundStart")){
      timeLeft = (1200-(seconds - startTime));

      fill(0xFFE3E3E3);
      rect(925,200,250,50);

      fill(color(0,0,0));
      if(timeLeft < 300){
        fill(color(255,0,0));
      }


      textFont(arial20);
      textSize(30);
      
      text("Time Left: " + (((int)timeLeft/60) + ":" + String.format("%02d",(timeLeft - (((int)timeLeft/60)*60)))) ,925,200,250,50);

      if(timeLeft == 0){
        nextButton();
        finishRoundGUI();
      }
      
      delay(5);
    }
  }

  /* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ MISCELLANEOUS ~~~~~~~~~~~~~~~~~~
  ~~~~~~~~~~~~~~~~~ */

  public void clearGui(){ //clear all gui functions like labels and buttons
  
    gui.remove("signUpButton");
    gui.remove("logInButton");
    gui.remove("exitButton");
    gui.remove("Login");
    gui.remove("Sign Up");
    gui.remove("Exit");
    gui.remove("backButton");
    gui.remove("Back");

    gui.remove("username");
    gui.remove("password");
    gui.remove("Confirm Password:");
    gui.remove("confirmPassword");
    gui.remove("USERNAME:");
    gui.remove("PASSWORD:");
    gui.remove("SUBMIT");
    gui.remove("signUpSubmit");
    gui.remove("loginSubmit");
    gui.remove("adminPin");
    gui.remove("Admin Pin:");
    gui.remove("Wrong Admin Pin. Please leave the field blank or input the correct pin");
    gui.remove("Please make your password 6 or more characters long");
    gui.remove("Please ensure that your passwords are the exact same");
    gui.remove("Invalid username or password. Please try again.");
    gui.remove("Sign Out");

    gui.remove("sprintRoundButton");
    gui.remove("Sprint Round");
    gui.remove("targetRoundButton");
    gui.remove("Target Round");
    gui.remove("teamRoundButton");
    gui.remove("Team Round");

    gui.remove("nextButton");
    gui.remove("START");
    gui.remove("NEXT");
    gui.remove("questionTextbox");
    gui.remove("questionTextbox2");
    gui.remove("Invalid answer. Please put in an integer.");

    gui.remove("You have already taken this \nexam! Try a different exam.");


    fill(0xFFE3E3E3); //Cover any previous labels
		rect(400,565,450,50);
  } 
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ BUTTON LOGIC AND METHODS ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

  public void signUpButton(int value){
		if(currentUser == -1){ //Sign Up Functionality
			stage = "signup";
			signupGUI(); //Set the sign-up page GUI
	  	}else{ //Sign Out Functionality
			currentUser = -1; 
			welcomeGUI();
	  	}
  }

  public void logInButton(int value){
	stage = "signup";
	loginGUI();
  }

  public void backButton(int value){
	if (currentUser == -1){
		stage = "welcome";
		welcomeGUI();
	}else{
		stage = "userMain";
		userMainGUI();
	}
  }

  public void exitButton(int value){ //exit
		System.exit(0);    
  }

  public void signUpSubmit(int value) { //submit button for signup
		String username, password, checkPassword,adminPassword;
		
		username = usernameField.getText();
		password = passwordField.getText();
		checkPassword = confirmPasswordField.getText();
		adminPassword = adminPasswordField.getText();
		
		fill(0xFFE3E3E3);
		rect(400,565,450,50);

		gui.remove("Wrong Admin Pin. Please leave the field blank or input the correct pin");
		gui.remove("Please make your password 6 or more characters long");
		gui.remove("Please ensure that your passwords are the exact same");

		if(password.equals(checkPassword)){  // Make sure passwords are correct, over 6 characters, + if admin pin is correct
			if(password.length() >= 6){
			if(adminPassword.equals(universalAdminPin) || adminPassword.equals("")){
				stage = "welcome";
				JSONObject userInfo = new JSONObject();
				
				userInfo.setString("Username", username);
				userInfo.setString("Password", password);
				if(adminPassword.equals(universalAdminPin)){ //Admin Pin is correct
				userInfo.setBoolean("Admin", true);
				}else{  //Admin Pin is empty (Regular Account)
				userInfo.setBoolean("Admin", false);
				}
				userInfo.setInt("sprintScore",-1);
				userInfo.setInt("targetScore",-1);
				userInfo.setInt("teamScore",-1);
				users.setJSONObject(users.size(), userInfo);
				saveJSONArray(users, "/data/new.json");

				welcomeGUI();
			}else{ //wrong pin
				gui.addLabel("Wrong Admin Pin. Please leave the field blank or input the correct pin").setPosition(440,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
			}
			}else{
			gui.addLabel("Please make your password 6 or more characters long").setPosition(440,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
			}
		}else{
			gui.addLabel("Please ensure that your passwords are the exact same").setPosition(440,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
		}
  } 

  public void loginSubmit(int value) { //submit button for login 
		String username, password;
		boolean successful = false;
		username = usernameField.getText();
		password = passwordField.getText();

		fill(0xFFE3E3E3); //Cover any previous labels
		rect(400,565,450,50);

		gui.remove("Invalid username or password. Please try again.");
		users = loadJSONArray("new.json");
		
		for (int i = 0; i < users.size(); i++) {
			JSONObject userInfo = users.getJSONObject(i);
			if(userInfo.getString("Username").equals(username) && userInfo.getString("Password").equals(password)){
				successful = true;
				currentUser = i;
				if(userInfo.getBoolean("Admin") == true){
					stage = "adminMain";
					adminMainGUI();
				}else if(userInfo.getBoolean("Admin") == false){
					stage = "userMain";
					userMainGUI();
				}
			}
		}
		if(successful == false){
			gui.addLabel("Invalid username or password. Please try again.").setPosition(440,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
		}
  }

public void sprintRoundButton() { //button to activate sprint round
	JSONObject userInfo = users.getJSONObject(currentUser);


	if(userInfo.getInt("sprintScore") == -1){ //Havent started yet
		stage = "sprintRound";
		preRoundGUI();
	}else{
		gui.addLabel("You have already taken this \nexam! Try a different exam.").setPosition(100,400).setSize(80,40).setFont(arial20).setColor(color(255,0,0));
	}
}

public void targetRoundButton() { //button to activate target round
	JSONObject userInfo = users.getJSONObject(currentUser);


	if(userInfo.getInt("targetScore") == -1){ //Havent started yet
		stage = "targetRound";
		preRoundGUI();
	}else{
		gui.addLabel("You have already taken this \nexam! Try a different exam.").setPosition(515,400).setSize(80,40).setFont(arial20).setColor(color(255,0,0));
	}
}

public void teamRoundButton() { //button to activate team round
	JSONObject userInfo = users.getJSONObject(currentUser);


	if(userInfo.getInt("teamScore") == -1){ //Havent started yet
		stage = "teamRound";
		preRoundGUI();
	}else{
		gui.addLabel("You have already taken this \nexam! Try a different exam.").setPosition(930,400).setSize(80,40).setFont(arial20).setColor(color(255,0,0));
	}
}

public void nextButton() { //button to move to next questions
	System.out.println(stage);
	System.out.println("QuestionNum " +questionNumber);
  
	if(stage.equals("sprintRound") || stage.equals("sprintRoundStart")){
		questions = loadJSONArray("sprintQuestions.json");
		
		if(questionNumber == -1){
			JSONObject userInfo = users.getJSONObject(currentUser);

			questionsGUI();
			
			stage = "sprintRoundStart";
			startTime = (millis()/1000);
			userInfo.setInt("sprintScore", 0);
			questionNumber = 0;

			JSONObject questionInfo = questions.getJSONObject(questionNumber);
			textFont(arial20);
			textSize(20);
			fill(0xFF000000);
			text(questionInfo.getString("Question"),125,250,1030,470);

		}else{
			JSONObject questionInfo = questions.getJSONObject(questionNumber);
			JSONObject userInfo = users.getJSONObject(currentUser);

			try {  
				Integer.parseInt(userAnswerField1.getText());  
			} catch(NumberFormatException e){  
				gui.addLabel("Invalid answer. Please put in an integer.").setPosition(480,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
				return;
			}  
			gui.remove("Invalid answer. Please put in an integer.");

			int correctAnswer = Integer.valueOf(userAnswerField1.getText());

			if(questionInfo.getInt("Answer") == correctAnswer){
				userInfo.setInt("sprintScore", (userInfo.getInt("sprintScore")+1));

				System.out.println("Correct Answer");
				users.setJSONObject(currentUser, userInfo);
				saveJSONArray(users, "/data/new.json");
			}

			if(questionNumber !=14){
				questionNumber++;
				questionInfo = questions.getJSONObject(questionNumber);

				questionsGUI();
				textFont(arial20);
				textSize(20);
				fill(0xFF000000);
				text(questionInfo.getString("Question"),125,250,1030,470);

			}else if(questionNumber == 14){
				questionNumber++;
				
				stage = "stageFinished";
				finishRoundGUI();
			}	
		}			
	}else if(stage.equals("targetRound") || stage.equals("targetRoundStart")){
		questions = loadJSONArray("targetQuestions.json");
		
		if(questionNumber == -1){
			JSONObject userInfo = users.getJSONObject(currentUser);

			questionsGUI();
			
			stage = "targetRoundStart";
			startTime = (millis()/1000);
			userInfo.setInt("targetScore", 0);
			questionNumber = 0;

			JSONObject questionInfo1 = questions.getJSONObject(questionNumber);
			JSONObject questionInfo2 = questions.getJSONObject((questionNumber+1));

			textFont(arial20);
			textSize(20);
			fill(0xFF000000);
			text(questionInfo1.getString("Question"),125,250,1030,470);
			text(questionInfo2.getString("Question"),125,400,1030,470);


		}else{
			JSONObject questionInfo1 = questions.getJSONObject(questionNumber);
			JSONObject questionInfo2 = questions.getJSONObject((questionNumber+1));
			JSONObject userInfo = users.getJSONObject(currentUser);

			try {  
				Integer.parseInt(userAnswerField1.getText());  
			} catch(NumberFormatException e){  
				gui.addLabel("Invalid answer. Please put in an integer.").setPosition(480,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
				return;
			}  

			try {  
				Integer.parseInt(userAnswerField2.getText());  
			} catch(NumberFormatException e){  
				gui.addLabel("Invalid answer. Please put in an integer.").setPosition(480,575).setSize(80,40).setFont(arial15).setColor(color(255,0,0));
				return;
			}  

			gui.remove("Invalid answer. Please put in an integer.");

			int correctAnswer = Integer.valueOf(userAnswerField1.getText());

			if(questionInfo1.getInt("Answer") == correctAnswer){
				userInfo.setInt("targetScore", (userInfo.getInt("targetScore")+2));

				System.out.println("Correct Answer");
				users.setJSONObject(currentUser, userInfo);
				saveJSONArray(users, "/data/new.json");
			}
			
			correctAnswer = Integer.valueOf(userAnswerField2.getText());

			if(questionInfo2.getInt("Answer") == correctAnswer){
				userInfo.setInt("targetScore", (userInfo.getInt("targetScore")+2));

				System.out.println("Correct Answer");
				users.setJSONObject(currentUser, userInfo);
				saveJSONArray(users, "/data/new.json");
			}

			if(questionNumber != 2){
				questionNumber++;
				questionNumber++;
				questionInfo1 = questions.getJSONObject(questionNumber);
				questionInfo2 = questions.getJSONObject((questionNumber+1));

				questionsGUI();
				textFont(arial20);
				textSize(20);
				fill(0xFF000000);
				text(questionInfo1.getString("Question"),125,250,1030,470);
				text(questionInfo2.getString("Question"),125,400,1030,470);
			
			}else if(questionNumber == 2){
			questionNumber++;
			stage = "stageFinished";
			finishRoundGUI();

			}
		}
	}else if(stage.equals("teamRound")){
		stage = "teamRoundStart";
	}
	
}
 
/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ GUI SETTINGS AND SETUP ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */

  public void welcomeGUI(){ //welcome page GUI, first page to show up
    clear();
    clearGui();
    
    //Background && UI
    background(backImg);
    stroke(2);
    image(urbanaMiddleSchool,15,170,400,250);
    image(group1,440,210,400,300);
    image(group2,15,440,400,250);
    image(award,865,170,400,530);
    noStroke();

    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);
    textAlign(LEFT,TOP);
    textSize(30);
    fill(0xFFCCCCCC);
    text("Get Ready for the MATHCOUNTS Competition!", 20,70);
    textFont(arial20);
    fill(0xFF000000);
    text("The Urbana Competition will be hosted online at Urbana Middle School! Hit the Sign Up button to get started!", 20,100);
    
    //buttons
    gui.addButton("signUpButton").setPosition(1015,12.5f).setSize(100,50).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addButton("logInButton").setPosition(1150,12.5f).setSize(100,50).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    gui.addLabel("Sign Up").setPosition(1020,25).setSize(100,50).setFont(arial20);
    gui.addLabel("Login").setPosition(1170,25).setSize(100,50).setFont(arial20);  
  }

  public void loginGUI(){  
    clear();
    clearGui();

    //Banner and Background
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    gui.addButton("backButton").setPosition(1070,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Back").setPosition(1085,85).setSize(80,40).setFont(arial20);

    //Login Specific
    fill(0xFFE3E3E3);
    rect(100,170,1080,550);
    fill(0xFF000080);
    rect(100,170,1080,10);
    textAlign(LEFT,TOP);
    textSize(50);
    text("LOGIN-", 105,175);
    textSize(15);
    fill(0xFF000000);
    text("Sign into your account here!", 105,230);
    
    fill(0xFF000000);
    usernameField = gui.addTextfield("username").setPosition(440, 330).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
    passwordField = gui.addTextfield("password").setPosition(440, 405).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
    gui.addBang("loginSubmit").setPosition(580, 630).setSize(120, 40).setLabel(""); 
    gui.addLabel("USERNAME:").setPosition(310,330).setSize(80,40).setFont(arial20).setColor(color(0,0,0));
    gui.addLabel("PASSWORD:").setPosition(310,405).setSize(80,40).setFont(arial20).setColor(color(0,0,0));
    gui.addLabel("SUBMIT").setPosition(600,635).setSize(120,40).setFont(arial20).setColor(color(0,0,0));
  }

  public void signupGUI(){
    clear();
    clearGui();
    
    //Banner and Background
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    gui.addButton("backButton").setPosition(1070,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Back").setPosition(1085,85).setSize(80,40).setFont(arial20);

    //Sign up Specific
    fill(0xFFE3E3E3);
    rect(100,170,1080,550);
    fill(0xFF000080);
    rect(100,170,1080,10);
    textAlign(LEFT,TOP);
    textSize(50);
    text("SIGN UP-", 105,175);
    textSize(15);
    fill(0xFF000000);
    text("You can create your account here! Make sure your password is at least 6 characters long, and if you are an admin, input the given pin. If you are not an admin, leave it blank.", 105,230);
    
    fill(0xFF000000);
    usernameField = gui.addTextfield("username").setPosition(440, 280).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
    passwordField = gui.addTextfield("password").setPosition(440, 355).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
    confirmPasswordField = gui.addTextfield("confirmPassword").setPosition(440, 430).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
    adminPasswordField = gui.addTextfield("adminPin").setPosition(440, 505).setSize(200, 40).setAutoClear(false).setFont(arial20).setLabel("");
    gui.addBang("signUpSubmit").setPosition(580, 630).setSize(120, 40).setLabel(""); 
    gui.addLabel("USERNAME:").setPosition(310,280).setSize(80,40).setFont(arial20).setColor(color(0,0,0));
    gui.addLabel("PASSWORD:").setPosition(310,355).setSize(80,40).setFont(arial20).setColor(color(0,0,0));
    gui.addLabel("Confirm Password:").setPosition(265,430).setSize(80,40).setFont(arial20).setColor(color(0,0,0));
    gui.addLabel("Admin Pin:").setPosition(335,505).setSize(30,40).setFont(arial20).setColor(color(0,0,0));
    gui.addLabel("SUBMIT").setPosition(600,635).setSize(120,40).setFont(arial20).setColor(color(0,0,0));
    
  }

  public void adminMainGUI(){ //Admin page GUI, main page/hub for admins
    clear();
    clearGui();
    
    //Background && UI
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);
    
    //buttons
    gui.addButton("signUpButton").setPosition(1150,12.5f).setSize(100,50).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    gui.addLabel("Sign Out").setPosition(1155,25).setSize(100,50).setFont(arial20);
  }

  public void userMainGUI(){ //Non-Admin user main page GUI, hub to questions
    clear();
    clearGui();
    
    //Background && UI
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);

    //non-admin main page specifics
    textFont(arial15);
    fill(0xFFE3E3E3);
    rect(60,170,1160,550);
    fill(0xFF000080);
    rect(60,170,1160,10);

    textSize(25);
    textAlign(LEFT,TOP);
    fill(0xFF000000);
    text("Choose one of the following buttons below to get started on your test! We recommend that you start \nwith the sprint round before moving onto the target and team rounds!", 105,200);
    textSize(15);
    text("The Sprint Round consists of 15 questions taken across 20 minutes! This section is Non-calculator, and each question is worth 1 point.", 90,445,270,400);
    text("The Target Round consists of 2 rounds of 2 questions. You have 12 minutes for the questions. This section is calculator enabled, and each question is worth 2 points.", 505,445,270,400);
    text("In the Team Round, 4 members will work together on 5 problems for 10 minutes with calculators. Only the team captain may input answers. This section is scored seperately from the Sprint and Target Rounds. This section is scored by taking the average score of the team members and adding 2pts for every correct team round answer.", 920,445,270,400);


    gui.addButton("sprintRoundButton").setPosition(100,300).setSize(250,100).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(255,127,39)).setLabel("");
    gui.addButton("targetRoundButton").setPosition(515,300).setSize(250,100).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(255,127,39)).setLabel("");
    gui.addButton("teamRoundButton").setPosition(930,300).setSize(250,100).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(255,127,39)).setLabel("");
    gui.addLabel("Sprint Round").setPosition(115,325).setSize(250,100).setFont(impact45).setColor(color(0,0,0));
    gui.addLabel("Target Round").setPosition(530,325).setSize(250,100).setFont(impact45).setColor(color(0,0,0));
    gui.addLabel("Team Round").setPosition(945,325).setSize(250,100).setFont(impact45).setColor(color(0,0,0));
    
    
    //buttons
    gui.addButton("signUpButton").setPosition(1150,12.5f).setSize(100,50).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    gui.addLabel("Sign Out").setPosition(1155,25).setSize(100,50).setFont(arial20);
  }

  public void preRoundGUI(){ //Pre-Round GUI
    clear();
    clearGui();
    
    //Background && UI
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);

    //Sprint Round GUI
    fill(0xFFE3E3E3);
    rect(100,170,1080,550);
    fill(0xFF000080);
    rect(100,170,1080,10);
    textAlign(LEFT,TOP);
    textSize(50);

    if(stage.equals("sprintRound")){
      text("Sprint Round-", 105,175);
      textFont(arial20);
      textSize(20);
      fill(0xFF000000);
      text("The Sprint Round consists of 15 questions taken across 20 minutes! You are not allowed to use calculators, books or other aids during this round. Calculations may be done on scratch paper. All answers must be complete, legible and simplified to lowest terms. Record only final answers in the blanks in the textbox above the submit button. If you complete the problems before time is called, use the remaining time to check your answers. In each written round of the competition, the required unit for the answer is included in the answer blank. The plural form of the unit is always used, even if the answer appears to require the singular form of the unit. The unit provided in the answer blank is the only form of the answer that will be accepted.\n\nEach question is worth 1 point. Once you are ready, hit the start button and your 20 minute timer will start.", 125,250,1030,470);
    }else if(stage.equals("targetRound")){
      text("Target Round-", 105,175);
      textFont(arial20);
      textSize(20);
      fill(0xFF000000);
      text("This section of the competition consists of 4 problems, which will be presented in pairs. You have 12 minutes to complete the 4 questions. When told to do so, hit the next button below and begin working. This round assumes the use of calculators, and calculations also may be done on scratch paper, but no other aids are allowed. All answers must be complete, legible and simplified to lowest terms. Record only final answers in the blanks in the lefthand column of the problem sheets. If you complete the problems before time is called, use the time remaining to check your answers. Once you are ready, hit the start button and your 12 minute timer will start.", 125,250,1030,470);

    }else if(stage.equals("teamRound")){
      text("Target Round-", 105,175);
      textFont(arial20);
      textSize(20);
      fill(0xFF000000);
      text("Once you are ready, hit the start button and your 6 minute timer will start.", 125,250,1030,470);

    }

    gui.addBang("nextButton").setPosition(580, 630).setSize(120, 40).setLabel(""); 
    gui.addLabel("START").setPosition(600,635).setSize(120,40).setFont(arial20).setColor(color(0,0,0));

    //buttons
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    
  }

  public void questionsGUI(){ //GUI for the Questions
    clear();
    clearGui();
    
    //Background && UI
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);

    //Sprint Round GUI
    fill(0xFFE3E3E3);
    rect(100,170,1080,550);
    fill(0xFF000080);
    rect(100,170,1080,10);
    textAlign(LEFT,TOP);
    textSize(50);
    
    if(stage.equals("sprintRound")||stage.equals("sprintRoundStart")){
      text("Sprint Round-", 105,175);
      gui.addBang("nextButton").setPosition(580, 630).setSize(120, 40).setLabel(""); 
      gui.addLabel("NEXT").setPosition(610,635).setSize(120,40).setFont(arial20).setColor(color(0,0,0));
      userAnswerField1 = gui.addTextfield("questionTextbox").setPosition(440, 330).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
    
    }else if(stage.equals("targetRound")||stage.equals("targetRoundStart")){
      text("Target Round-", 105,175);
      gui.addBang("nextButton").setPosition(580, 630).setSize(120, 40).setLabel(""); 
      gui.addLabel("NEXT").setPosition(610,635).setSize(120,40).setFont(arial20).setColor(color(0,0,0));
      userAnswerField1 = gui.addTextfield("questionTextbox").setPosition(440, 340).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");
      userAnswerField2 = gui.addTextfield("questionTextbox2").setPosition(440, 490).setSize(400, 40).setAutoClear(false).setFont(arial20).setLabel("");

    }else if(stage.equals("teamRound")||stage.equals("teamRoundStart")){

    }

    //buttons
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);

    
  }

 public void finishRoundGUI(){  
    clear();
    clearGui();
    questionNumber = -1;
    

    //Banner and Background
    background(backImg);
    fill(0xFF674ea7);
    rect(0,0,1280,75);
    fill(0xb43b5dc5);
    rect(0,75,1280,50);
    fill(0xFFFFFFFF);

    textFont(impact);
    textSize(80);
    textAlign(LEFT,BOTTOM);
    text("MATHCOUNTS", 20,80);
    
    textFont(arial20);
    textSize(20);
    fill(0xFF000000);
    text("You have finished this round of testing! Your score will be automatically graded. Click the \"Back\" button to \ncontinue back to the main screen.", 125,300);
    gui.addButton("exitButton").setPosition(1170,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Exit").setPosition(1190,85).setSize(80,40).setFont(arial20);
    gui.addButton("backButton").setPosition(1070,80).setSize(80,40).activateBy(ControlP5.RELEASE).setColorBackground(color(0xFFFF9900)).setColorForeground(color(0xFFE58F0E)).setColorActive(color(0xFFFF9900)).setLabel("");
    gui.addLabel("Back").setPosition(1085,85).setSize(80,40).setFont(arial20);
    
  }


  


  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "ZhengIA" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
